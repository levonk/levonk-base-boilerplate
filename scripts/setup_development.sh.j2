#!/usr/bin/env bash
# Template: scripts/setup_development.sh.j2
# Purpose: Per-container development setup (runs via postStartCommand)

set -euo pipefail

# Ensure workspace structure exists
mkdir -p .envs

# --- Optional dotfiles bootstrap ---
{% if project_type == 'dotfiles' and dotfiles_repository %}
DOTFILES_DEST="{{ dotfiles_destination or '$HOME/.dotfiles' }}"
if [ ! -d "${DOTFILES_DEST}" ]; then
  echo "[setup_development] cloning dotfiles: {{ dotfiles_repository }} -> ${DOTFILES_DEST}"
  git clone --depth=1 "{{ dotfiles_repository }}" "${DOTFILES_DEST}"
  if [ -f "${DOTFILES_DEST}/install.sh" ]; then
    bash "${DOTFILES_DEST}/install.sh" || true
  fi
fi
{% endif %}

# --- Development/runtime Ansible roles (optional) ---
{% if development_runtime_ansible_roles and development_runtime_ansible_roles|length > 0 %}
if command -v ansible-playbook >/dev/null 2>&1; then
  echo "[setup_development] applying development_runtime_ansible_roles via playbook"
  tmp_playbook=$(mktemp)
  cat >"${tmp_playbook}" <<'YAML'
- hosts: localhost
  connection: local
  gather_facts: false
  roles:
{% for role in development_runtime_ansible_roles %}
    - {{ role }}
{% endfor %}
YAML
  ansible-playbook "${tmp_playbook}" -i localhost,
  rm -f "${tmp_playbook}"
else
  echo "[setup_development] ansible not installed; skipping roles"
fi
{% endif %}

# --- Generate per-agent env files ---
{% if number_of_worktrees and number_of_worktrees|int > 0 %}
for i in $(seq 1 {{ number_of_worktrees }}); do
  envdir=".envs/agent${i}"
  mkdir -p "${envdir}"
  envfile="${envdir}/.env"
  if [ ! -f "${envfile}" ]; then
    {
      echo "# Generated by setup_development.sh"
      echo "WORKTREE_NAME={{ worktree_prefix }}-${i}"
      echo "AGENT_PORT=${AGENT_PORT:-$(( {{ base_ide_port }} + (i * {{ agent_ide_port_increment }}) ))}"
      {% if num_ide_ports and num_ide_ports|int > 0 %}
      # IDE ports computed for this agent
      {% for p in range(0, num_ide_ports) %}
      echo "IDE_PORT_{{ p + 1 }}=$(( {{ base_ide_port }} + {{ p }} + (i * {{ agent_ide_port_increment }}) ))"
      {% endfor %}
      {% endif %}
    } > "${envfile}"
  fi
done
{% endif %}

echo "[setup_development] complete"
